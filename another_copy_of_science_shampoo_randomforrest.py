# -*- coding: utf-8 -*-
"""Another copy of Science_Shampoo_RandomForrest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ese6eqAjJlIgO5qUy85TPurtOahxPL3y
"""
from main import B_mean1, G_mean1, R_mean1
import pandas as pd
import numpy as np
import sklearn
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
#import google.colab


#from google.colab import drive
#drive.mount('/content/drive')

# Load the dataset
#file_path = "/content/drive/My Drive/Colab Notebooks/Refined_Bath_Soak.csv"
#file_path = "/content/drive/My Drive/Colab Notebooks/Refined_Dish_Soap.csv"
#file_path = "/content/drive/My Drive/Colab Notebooks/Refined_Hand_Soap.csv"
file_path = "Refined_Shampoo.csv"


data = pd.read_csv(file_path)

# Define features (X) and target variable (y)
X = data[['blue_value', 'green_value', 'red_value']]
y = data['concentration_percentage']

# Standardizing the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split the data into training (80%) and testing (20%) sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Train a Random Forest Regressor for improved accuracy
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# Predictions on test data
y_pred_rf = rf_model.predict(X_test)

# Evaluate model performance
mae_rf = mean_absolute_error(y_test, y_pred_rf)
rmse_rf = np.sqrt(mean_squared_error(y_test, y_pred_rf))
r2_rf = r2_score(y_test, y_pred_rf)

# Test case prediction
#test_input = np.array([[0.68, 0.29, 0.02]])  # Example RGB values
#test_input = np.array([[0.629164051, 0.307763538, 0.063072412]])  # Example RGB values
test_input = np.array([[B_mean1, G_mean1, R_mean1]])  # Example RGB values 

test_input_scaled = scaler.transform(test_input)
predicted_concentration_rf = rf_model.predict(test_input_scaled)[0]

# Print results
print(f"Random Forest Model Performance:")
print(f"Mean Absolute Error (MAE): {mae_rf:.10f}")
print(f"Root Mean Squared Error (RMSE): {rmse_rf:.10f}")
print(f"RÂ² Score: {r2_rf:.5f}")
print(f"Test Case Prediction for test input {test_input} : {predicted_concentration_rf:.2f}")
Concentration = (f"Test Case Prediction for test input {test_input} : {predicted_concentration_rf:.2f}")